name: Repository Protection

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Protection action to perform'
        required: true
        type: choice
        options: [lock-it-down, remove-protection, emergency-unlock, status-check]
      confirmation:
        description: 'Type "CONFIRM" to proceed (not needed for status-check)'
        required: false
        type: string
      approval_count:
        description: 'Required approvals (1-6)'
        required: true
        default: '2'
        type: choice
        options: ['1','2','3','4','5','6']
      bypass_admin:
        description: 'Allow admin bypass in emergencies?'
        required: true
        default: 'false'
        type: choice
        options: ['true','false']
      auto_relock_hours:
        description: 'Auto re-lock after emergency unlock (hours, 0=manual)'
        required: true
        default: '24'
        type: choice
        options: ['0','1','4','8','24','72']
      maintainer_username:
        description: 'Additional maintainer GitHub username (optional)'
        required: false
        type: string

  schedule:
    - cron: '0 2 * * *' # Nightly at 2am UTC

permissions:
  contents: write
  issues: write
  pull-requests: write
  administration: write

env:
  PROTECTION_LABEL: 'repo-protection-status'
  EMERGENCY_LABEL: 'üö®-emergency-unlock'
  FORBIDDEN_REGEX: "(\\.pem$|\\.key$|\\.p12$|\\.env$|/secrets/)"

jobs:
  validate-user:
    runs-on: ubuntu-latest
    outputs:
      authorized: ${{ steps.check.outputs.authorized }}
      skip_confirmation: ${{ steps.check.outputs.skip_confirmation }}
      user_role: ${{ steps.check.outputs.user_role }}
    steps:
      - name: Validate user and confirmation
        id: check
        run: |
          maintainer="${{ github.event.inputs.maintainer_username }}"
          if [ "${{ github.actor }}" != "${{ github.repository_owner }}" ] && [ "${{ github.actor }}" != "$maintainer" ]; then
            echo "authorized=false" >> $GITHUB_OUTPUT
            echo "user_role=unauthorized" >> $GITHUB_OUTPUT
            exit 1
          fi
          if [ "${{ github.actor }}" == "${{ github.repository_owner }}" ]; then
            echo "user_role=owner" >> $GITHUB_OUTPUT
          else
            echo "user_role=maintainer" >> $GITHUB_OUTPUT
          fi
          if [ "${{ github.event.inputs.action }}" = "status-check" ]; then
            echo "skip_confirmation=true" >> $GITHUB_OUTPUT
            echo "authorized=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          if [ "${{ github.event.inputs.confirmation }}" != "CONFIRM" ]; then
            echo "authorized=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "skip_confirmation=false" >> $GITHUB_OUTPUT
          echo "authorized=true" >> $GITHUB_OUTPUT

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run CodeQL Init
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, typescript, python

      - name: Analyze with CodeQL
        uses: github/codeql-action/analyze@v3

      - name: Secret & Forbidden File Scan
        id: scan
        run: |
          echo "üîç Scanning repository..."
          issues=0
          # Check for forbidden files
          if git diff --name-only origin/main...HEAD | grep -E "${FORBIDDEN_REGEX}"; then
            echo "‚ùå Forbidden file detected"
            echo "found_forbidden=true" >> $GITHUB_OUTPUT
            issues=1
          fi
          # Check for secrets
          if grep -r --include="*.{js,ts,py,json,yml,yaml,env}" -E "(AKIA|SECRET|PASSWORD|TOKEN|PRIVATE_KEY)" .; then
            echo "‚ùå Possible secret detected in code"
            echo "found_secret=true" >> $GITHUB_OUTPUT
            issues=1
          fi
          if [ $issues -eq 0 ]; then
            echo "‚úÖ No forbidden files or secrets found"
            echo "safe=true" >> $GITHUB_OUTPUT
          else
            exit 1

      - name: Auto-Close PR if Security Violations Found
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            if (!pr) {
              console.log("‚ÑπÔ∏è Not a PR context, skipping");
              return;
            }
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body: `üö® **PR Closed Automatically**

This pull request contained **forbidden files or secrets** and was automatically closed.

‚ùå Forbidden files include: \`.pem\`, \`.key\`, \`.p12\`, \`.env\`, \`/secrets/\`  
‚ùå Secrets detected include tokens, passwords, API keys, or private keys  

Please remove these and open a new PR.`
            });
            await github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number,
              state: "closed"
            });
            console.log(`üö® Closed PR #${pr.number} due to security violations`);

  apply-protection:
    needs: validate-user
    runs-on: ubuntu-latest
    if: needs.validate-user.outputs.authorized == 'true' && github.event.inputs.action == 'lock-it-down'
    steps:
      - name: Update CODEOWNERS
        run: |
          mkdir -p .github
          echo "# Repository Protection" > .github/CODEOWNERS
          if [ -n "$MAINTAINER_USERNAME" ]; then
            echo "* @$REPO_OWNER @$MAINTAINER_USERNAME" >> .github/CODEOWNERS
          else
            echo "* @$REPO_OWNER" >> .github/CODEOWNERS
          fi
          git add .github/CODEOWNERS
          git commit -m "üîí Update CODEOWNERS" || true
          git push || true
        env:
          REPO_OWNER: ${{ github.repository_owner }}
          MAINTAINER_USERNAME: ${{ github.event.inputs.maintainer_username }}

      - name: Update branch protection rules
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const approvals = parseInt('${{ github.event.inputs.approval_count }}');
            const bypassAdmin = '${{ github.event.inputs.bypass_admin }}' === 'true';
            const branches = ['main','master'];
            for (const branch of branches) {
              try {
                await github.rest.repos.updateBranchProtection({
                  owner: context.repo.owner, repo: context.repo.repo, branch,
                  required_status_checks: { strict: true, contexts: ["security-scan"] },
                  enforce_admins: !bypassAdmin,
                  required_pull_request_reviews: {
                    required_approving_review_count: approvals,
                    dismiss_stale_reviews: true,
                    require_code_owner_reviews: true
                  },
                  allow_force_pushes: false,
                  allow_deletions: false,
                  required_conversation_resolution: true
                });
                console.log(`‚úÖ ${branch} secured`);
              } catch (e) { console.log(`‚ö†Ô∏è ${branch}: ${e.message}`); }
            }

  create-security-guidelines:
    name: Post Security Guidelines
    runs-on: ubuntu-latest
    needs: [validate-user, apply-protection]
    if: needs.validate-user.outputs.authorized == 'true' && github.event.inputs.action == 'lock-it-down'
    steps:
      - name: Post security guideline issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const maintainer = '${{ github.event.inputs.maintainer_username }}';
            const owner = '${{ github.repository_owner }}';
            const reviewers = maintainer ? `@${owner} and @${maintainer}` : `@${owner}`;
            const approvals = '${{ github.event.inputs.approval_count }}';

            // Close any existing open security-guidelines issues first
            const { data: existing } = await github.rest.issues.listForRepo({
              owner: context.repo.owner, repo: context.repo.repo,
              labels: ['security-guidelines'], state: 'open'
            });
            for (const issue of existing) {
              await github.rest.issues.update({
                owner: context.repo.owner, repo: context.repo.repo,
                issue_number: issue.number, state: 'closed', state_reason: 'completed'
              });
            }

            await github.rest.issues.create({
              owner: context.repo.owner, repo: context.repo.repo,
              title: 'üîí Security Rules & Contribution Guidelines',
              body: `# üîí Repository Security Rules

This repository is under **strict security protection**.  

---

## ‚úÖ Allowed
- Branch off \`main\` / \`master\`
- Open PRs for changes
- Pass **security-scan**
- Get ${approvals} approvals + code owner review
- Fix issues raised in reviews

## ‚ùå Forbidden
- Direct pushes to protected branches
- Merging PRs without approvals
- Merging with failing security-scan
- Merging with unresolved conversations
- Adding **forbidden files** (\`.pem\`, \`.key\`, \`.p12\`, \`.env\`, \`/secrets/\`)
- Committing secrets (tokens, API keys, passwords, private keys)
- Force pushing or deleting branches

---

‚ö†Ô∏è **PRs with forbidden files or secrets will be automatically CLOSED by the bot.**

Maintainers: ${reviewers}  
Activated by: @${{ github.actor }}  
üìå *This issue is pinned for contributor reference*`,
              labels:
                - security-guidelines
                - documentation
                - pinned
            });

  delete-stale-branches:
    name: Delete Stale Branches
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Delete old, closed, or merged branches
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const defaultBranches = ['main', 'master'];
            const { data: branches } = await github.rest.repos.listBranches({
              owner: context.repo.owner,
              repo: context.repo.repo,
              protected: false
            });
            for (const branch of branches) {
              if (defaultBranches.includes(branch.name)) continue;
              try {
                // Check for open PRs on this branch
                const prs = await github.rest.pulls.list({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  head: `${context.repo.owner}:${branch.name}`,
                  state: 'open'
                });
                if (prs.data.length === 0) {
                  // Try to delete the branch
                  await github.rest.git.deleteRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: `heads/${branch.name}`
                  });
                  console.log(`üóëÔ∏è Deleted stale branch: ${branch.name}`);
                }
              } catch (e) {
                // Ignore errors (branch may already be deleted, protected, etc)
              }
            }
