name: Enhanced Repository Protection

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Protection action to perform'
        required: true
        type: choice
        options: [lock-it-down, remove-protection, emergency-unlock, status-check]
      confirmation:
        description: 'Type "CONFIRM" to proceed (not needed for status-check)'
        required: false
        type: string
      approval_count:
        description: 'Required approvals (1-6)'
        required: true
        default: '2'
        type: choice
        options: ['1','2','3','4','5','6']
      bypass_admin:
        description: 'Allow admin bypass in emergencies?'
        required: true
        default: 'false'
        type: choice
        options: ['true','false']
      maintainer_username:
        description: 'Additional maintainer GitHub username (optional)'
        required: false
        type: string

  schedule:
    - cron: '0 2 * * *'  # Run at 2 AM UTC daily

permissions:
  contents: write
  issues: write
  pull-requests: write
  administration: write

env:
  PROTECTION_LABEL: 'repo-protection-status'
  EMERGENCY_LABEL: '🚨-emergency-unlock'

jobs:
  validate-user:
    runs-on: ubuntu-latest
    outputs:
      authorized: ${{ steps.check.outputs.authorized }}
      user_role: ${{ steps.check.outputs.user_role }}
    steps:
      - name: Validate user permissions
        id: check
        run: |
          maintainer="${{ github.event.inputs.maintainer_username }}"
          if [ "${{ github.actor }}" != "${{ github.repository_owner }}" ] && [ "${{ github.actor }}" != "$maintainer" ]; then
            echo "authorized=false" >> $GITHUB_OUTPUT
            echo "user_role=unauthorized" >> $GITHUB_OUTPUT
            exit 1
          fi
          if [ "${{ github.actor }}" == "${{ github.repository_owner }}" ]; then
            echo "user_role=owner" >> $GITHUB_OUTPUT
          else
            echo "user_role=maintainer" >> $GITHUB_OUTPUT
          fi
          echo "authorized=true" >> $GITHUB_OUTPUT

  cleanup-old-branches:
    needs: validate-user
    if: needs.validate-user.outputs.authorized == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Delete old branches
        run: |
          git fetch --prune origin
          
          # Get list of branches excluding protected ones
          branches=$(git branch -r | grep -v "HEAD\|main\|master" | sed 's/origin\///')
          
          for branch in $branches; do
            # Check if branch has no open PRs and is older than 30 days
            last_commit=$(git log -1 --since="30 days ago" -s origin/$branch)
            if [ -z "$last_commit" ]; then
              echo "Deleting stale branch: $branch"
              git push origin --delete "$branch" || true
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-security-guidelines:
    name: Post Security Guidelines
    needs: [validate-user]
    if: needs.validate-user.outputs.authorized == 'true' && github.event.inputs.action == 'lock-it-down'
    runs-on: ubuntu-latest
    steps:
      - name: Post security guideline issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const maintainer = '${{ github.event.inputs.maintainer_username }}';
            const owner = '${{ github.repository_owner }}';
            const reviewers = maintainer ? `@${owner} and @${maintainer}` : `@${owner}`;
            const approvals = '${{ github.event.inputs.approval_count }}';

            // Close any existing open security-guidelines issues first
            const { data: existing } = await github.rest.issues.listForRepo({
              owner: context.repo.owner, repo: context.repo.repo,
              labels: ['security-guidelines'], state: 'open'
            });
            for (const issue of existing) {
              await github.rest.issues.update({
                owner: context.repo.owner, repo: context.repo.repo,
                issue_number: issue.number, state: 'closed', state_reason: 'completed'
              });
            }

            await github.rest.issues.create({
              owner: context.repo.owner, repo: context.repo.repo,
              title: '🔒 Security Rules & Contribution Guidelines',
              body: `# 🔒 Repository Security Rules\n\nThis repository is under **strict security protection**.  \n\n---\n\n## ✅ Allowed\n- Branch off \`main\` / \`master\`\n- Open PRs for changes\n- Pass **security-scan**\n- Get ${approvals} approvals + code owner review\n- Fix issues raised in reviews\n\n## ❌ Forbidden\n- Direct pushes to protected branches\n- Merging PRs without approvals\n- Merging with failing security-scan\n- Merging with unresolved conversations\n- Adding **forbidden files** (\`.pem\`, \`.key\`, \`.p12\`, \`.env\`, \`/secrets/\`)\n- Committing secrets (tokens, API keys, passwords, private keys)\n- Force pushing or deleting branches\n\n---\n\n⚠️ **PRs with forbidden files or secrets will be automatically CLOSED by the bot.**\n\nMaintainers: ${reviewers}  \nActivated by: @${{ github.actor }}  \n📌 *This issue is pinned for contributor reference*`,
              labels: ['security-guidelines', 'documentation', 'pinned']
            });

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Scan for secrets and forbidden files
        run: |
          # Check for forbidden files
          forbidden_files=$(find . -type f -regex ".*\.\(pem\|key\|p12\|env\)" -o -path "*/secrets/*")
          if [ ! -z "$forbidden_files" ]; then
            echo "::error::Found forbidden files:"
            echo "$forbidden_files"
            exit 1
          fi
          
          # Check for potential secrets
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | 
             xargs grep -l -E "(AKIA|SECRET|TOKEN|KEY|PASSWORD)" 2>/dev/null; then
            echo "::error::Potential secrets found in changes"
            exit 1
          fi

  protect-branches:
    needs: [validate-user, security-scan]
    if: needs.validate-user.outputs.authorized == 'true' && github.event.inputs.action == 'lock-it-down'
    runs-on: ubuntu-latest
    steps:
      - name: Setup branch protection
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const approvals = parseInt('${{ github.event.inputs.approval_count }}');
            const bypassAdmin = '${{ github.event.inputs.bypass_admin }}' === 'true';
            
            for (const branch of ['main', 'master']) {
              try {
                await github.rest.repos.updateBranchProtection({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  branch: branch,
                  required_status_checks: {
                    strict: true,
                    contexts: ['security-scan']
                  },
                  enforce_admins: !bypassAdmin,
                  required_pull_request_reviews: {
                    required_approving_review_count: approvals,
                    dismiss_stale_reviews: true,
                    require_code_owner_reviews: true
                  },
                  restrictions: null,
                  allow_force_pushes: false,
                  allow_deletions: false,
                  required_conversation_resolution: true
                });
                console.log(`✅ Protected ${branch} branch`);
              } catch (e) {
                if (e.status !== 404) {
                  throw e;
                }
                console.log(`Branch ${branch} not found, skipping`);
              }
            }
