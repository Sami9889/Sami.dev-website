name: Issue Branch & PR Workflow

on:
  issues:
    types: [opened]
  pull_request:
    types: [closed]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  handle-issue-pr:
    runs-on: ubuntu-latest
    steps:
      # Checkout repository
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Configure git
      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      # Prepare branch name and check permissions
      - name: Set variables
        id: vars
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue;
            const username = issue.user.login.toLowerCase();
            const issueNumber = issue.number;
            const issueTitle = issue.title || 'issue';
            const defaultBranch = context.payload.repository.default_branch;

            const slugify = s => s.toLowerCase()
                                   .replace(/[^a-z0-9]+/g,'-')
                                   .replace(/(^-|-$)/g,'')
                                   .slice(0,50) || 'issue';
            const slug = slugify(issueTitle);
            const branchName = `issue-${issueNumber}/${username}/${slug}`;

            // Check collaborator permission
            let permission = 'none';
            try {
              const perm = await github.rest.repos.getCollaboratorPermissionLevel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                username
              });
              permission = perm.data.permission || 'none';
            } catch(e) {}

            return {
              branchName,
              issueNumber,
              issueTitle,
              username,
              defaultBranch,
              permission
            };

      # Create branch & initial commit if collaborator
      - name: Create branch and commit
        if: ${{ contains(fromJSON(steps.vars.outputs.permission), 'write') || contains(fromJSON(steps.vars.outputs.permission), 'admin') || contains(fromJSON(steps.vars.outputs.permission), 'maintain') }}
        run: |
          BRANCH="${{ fromJSON(steps.vars.outputs.branchName) }}"
          DEFAULT="${{ fromJSON(steps.vars.outputs.defaultBranch) }}"
          ISSUE="${{ fromJSON(steps.vars.outputs.issueNumber) }}"

          git checkout -b $BRANCH origin/$DEFAULT
          echo "# Work in progress for issue #$ISSUE" > README-ISSUE.md
          git add README-ISSUE.md
          git commit -m "Initial commit for issue #$ISSUE"
          git push origin $BRANCH

      # Create draft PR and comment for collaborator
      - name: Create PR and comment
        if: ${{ contains(fromJSON(steps.vars.outputs.permission), 'write') || contains(fromJSON(steps.vars.outputs.permission), 'admin') || contains(fromJSON(steps.vars.outputs.permission), 'maintain') }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { branchName, issueNumber, issueTitle, defaultBranch } = fromJSON(process.env.STEP_VARS || '{}');
            const pr = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `[${issueNumber}] ${issueTitle}`,
              head: branchName,
              base: defaultBranch,
              body: `This PR addresses issue #${issueNumber}`,
              draft: true
            });
            const comment = `
âœ… Branch created: \`${branchName}\`
Draft Pull Request: ${pr.data.html_url}

Checkout locally:
git fetch origin && git checkout ${branchName}

Make changes, commit, push, and continue working on the PR.
`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: comment
            });

      # Comment instructions for external contributors
      - name: External contributor instructions
        if: ${{ !contains(fromJSON(steps.vars.outputs.permission), 'write') && !contains(fromJSON(steps.vars.outputs.permission), 'admin') && !contains(fromJSON(steps.vars.outputs.permission), 'maintain') }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { branchName, issueNumber, username } = fromJSON(process.env.STEP_VARS || '{}');
            const comment = `
Hi @${username}, thanks for opening this issue!

You don't have permission to create a branch in this repository.
You can still contribute by following these steps:
1. Fork the repository to your account.
2. Create a branch in your fork using the suggested name: \`git checkout -b ${branchName}\`
3. Make your changes and push to your fork: \`git push origin ${branchName}\`
4. Open a Pull Request in the main repository referencing this issue (e.g. \`Fixes #${issueNumber}\`)

Using the suggested branch name ensures consistency with our workflow.
`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: comment
            });

      # Cleanup branch on PR close/merge
      - name: PR closed - cleanup branch
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            const branchName = pr.head.ref;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            const match = branchName.match(/^issue-(\d+)\/.+$/);
            if (!match) return;

            const issueNumber = parseInt(match[1]);
            try {
              await github.rest.git.deleteRef({ owner, repo, ref: `heads/${branchName}` });
              const body = `The branch \`${branchName}\` has been deleted because PR #${pr.number} was ${pr.merged ? 'merged' : 'closed'}.`;
              await github.rest.issues.createComment({ owner, repo, issue_number: issueNumber, body });
              await github.rest.issues.addLabels({ owner, repo, issue_number: issueNumber, labels: ['branch-deleted'] });
            } catch(err) {
              console.error(`Failed to delete branch: ${err.message}`);
            }
