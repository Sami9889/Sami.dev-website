name: Issue Branch & PR Workflow

on:
  issues:
    types: [opened, labeled]
  pull_request:
    types: [closed]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  issue-branch-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout default branch
        if: github.event_name == 'issues'
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.repository.default_branch }}
          fetch-depth: 0

      - name: Configure git
        if: github.event_name == 'issues'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Handle new issue - create branch & PR
        if: github.event_name == 'issues'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const defaultBranch = context.payload.repository.default_branch;

            // Only proceed if the label "create-branch" exists
            const labels = (issue.labels || []).map(l => String(l.name).toLowerCase());
            if (!labels.includes('create-branch')) {
              console.log("Label 'create-branch' not found. Skipping branch creation.");
              return;
            }

            const username = issue.user.login.toLowerCase();
            const issueNumber = issue.number;
            const issueTitle = issue.title || 'issue';
            const slugify = s => s.toLowerCase()
                                   .replace(/[^a-z0-9]+/g,'-')
                                   .replace(/(^-|-$)/g,'')
                                   .slice(0,50) || 'issue';
            const slug = slugify(issueTitle);
            const branchName = `issue-${issueNumber}/${username}/${slug}`;

            // Check collaborator permission
            let permission = 'none';
            try {
              const perm = await github.rest.repos.getCollaboratorPermissionLevel({ owner, repo, username });
              permission = perm.data.permission || 'none';
            } catch(e) { permission = 'none'; }

            const allowed = ['admin','maintain','write'];

            if (!allowed.includes(permission)) {
              const body = `Hi @${username}, I can't create a branch for you because you don't have push access.\n\nPlease fork the repository, create a branch in your fork, push your changes, and open a PR referencing this issue (e.g. \`Fixes #${issueNumber}\`).`;
              await github.rest.issues.createComment({ owner, repo, issue_number: issueNumber, body });
              return;
            }

            // Get default branch SHA
            const ref = await github.rest.git.getRef({ owner, repo, ref: `heads/${defaultBranch}` });
            const sha = ref.data.object.sha;

            // Create branch
            try {
              await github.rest.git.createRef({ owner, repo, ref: `refs/heads/${branchName}`, sha });
            } catch(err) {
              if (err.status === 422) console.log(`Branch ${branchName} already exists`);
              else throw err;
            }

            // Create draft PR
            const pr = await github.rest.pulls.create({
              owner, repo,
              title: `[${issueNumber}] ${issueTitle}`,
              head: branchName,
              base: defaultBranch,
              body: `This PR addresses issue #${issueNumber}`,
              draft: true
            });

            // Comment on issue
            const comment = [
              `âœ… Branch created: \`${branchName}\``,
              `Draft Pull Request: ${pr.data.html_url}`,
              '',
              `Checkout locally:`,
              `\`\`\`bash`,
              `git fetch origin && git checkout ${branchName}`,
              `\`\`\``,
              `Make changes, commit, push, and continue working on the PR.`,
              '',
              `If you don't have push access, fork the repo and create a PR from your fork instead.`
            ].join('\n');

            await github.rest.issues.createComment({ owner, repo, issue_number: issueNumber, body: comment });

      - name: PR closed - cleanup branch
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            const branchName = pr.head.ref;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            const match = branchName.match(/^issue-(\d+)\/.+$/);
            if (!match) {
              console.log(`Branch ${branchName} does not match issue branch pattern. Skipping deletion.`);
              return;
            }

            const issueNumber = parseInt(match[1]);

            try {
              // Delete branch
              await github.rest.git.deleteRef({ owner, repo, ref: `heads/${branchName}` });
              console.log(`Deleted branch ${branchName}`);

              // Comment on issue
              const body = `The branch \`${branchName}\` has been deleted because PR #${pr.number} was ${pr.merged ? 'merged' : 'closed'}.`;
              await github.rest.issues.createComment({ owner, repo, issue_number: issueNumber, body });

              // Add label
              await github.rest.issues.addLabels({ owner, repo, issue_number: issueNumber, labels: ['branch-deleted'] });
            } catch (err) {
              console.error(`Failed to delete branch: ${err.message}`);
            }
