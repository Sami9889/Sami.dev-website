name: Issue Branch PR Workflow

on:
  issues:
    types: [opened, assigned, labeled]
  pull_request:
    types: [opened, closed, synchronize]
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * 0'

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  create-branch:
    name: Create Branch from Issue
    if: github.event_name == 'issues' && (github.event.action == 'opened' || github.event.action == 'assigned')
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          
      - name: Setup Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
      - name: Create issue branch
        id: create_branch
        run: |
          ISSUE_NUMBER="${{ github.event.issue.number }}"
          ISSUE_TITLE="${{ github.event.issue.title }}"
          
          CLEAN_TITLE=$(echo "$ISSUE_TITLE" | sed 's/[^a-zA-Z0-9 ]//g' | tr '[:upper:]' '[:lower:]' | sed 's/ /-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g' | cut -c1-50)
          
          BRANCH_NAME="issue-${ISSUE_NUMBER}-${CLEAN_TITLE}"
          
          echo "Creating branch: $BRANCH_NAME"
          
          if git ls-remote --heads origin "$BRANCH_NAME" | grep -q "$BRANCH_NAME"; then
            echo "Branch $BRANCH_NAME already exists"
            echo "branch_exists=true" >> $GITHUB_OUTPUT
          else
            git checkout -b "$BRANCH_NAME"
            git push origin "$BRANCH_NAME"
            echo "branch_exists=false" >> $GITHUB_OUTPUT
            echo "Branch $BRANCH_NAME created successfully"
          fi
          
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Comment on issue
        if: steps.create_branch.outputs.branch_exists == 'false'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branchName = '${{ steps.create_branch.outputs.branch_name }}';
            const issueNumber = context.issue.number;
            
            const comment = 'Branch Created\n\n' +
                          'A new branch has been created for this issue:\n' +
                          '- Branch: `' + branchName + '`\n' +
                          '- You can start working on this issue by checking out the branch\n\n' +
                          '```bash\n' +
                          'git fetch origin\n' +
                          'git checkout ' + branchName + '\n' +
                          '```\n\n' +
                          'When ready, create a pull request to merge your changes!';
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: comment
            });

  auto-create-pr:
    name: Auto Create Pull Request
    if: github.event_name == 'issues' && github.event.action == 'labeled' && contains(github.event.label.name, 'ready-for-pr')
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          
      - name: Find and create PR for issue branch
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue;
            const issueNumber = issue.number;
            
            const cleanTitle = issue.title
              .replace(/[^a-zA-Z0-9 ]/g, '')
              .toLowerCase()
              .replace(/\s+/g, '-')
              .replace(/-+/g, '-')
              .replace(/^-|-$/g, '')
              .substring(0, 50);
            
            const branchName = 'issue-' + issueNumber + '-' + cleanTitle;
            
            try {
              const branch = await github.rest.repos.getBranch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                branch: branchName
              });
              
              const existingPRs = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                head: context.repo.owner + ':' + branchName,
                state: 'open'
              });
              
              if (existingPRs.data.length > 0) {
                console.log('PR already exists for branch ' + branchName);
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber,
                  body: 'Pull Request Already Exists\n\n' +
                        'A pull request already exists for this issue:\n' +
                        '- PR: #' + existingPRs.data[0].number + '\n' +
                        '- Branch: `' + branchName + '`\n\n' +
                        '[View Pull Request](' + existingPRs.data[0].html_url + ')'
                });
                return;
              }
              
              const newPR = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'Fix #' + issueNumber + ': ' + issue.title,
                head: branchName,
                base: 'main',
                body: '## Description\n\n' +
                      'Fixes #' + issueNumber + '\n\n' +
                      '## Issue Details\n' +
                      (issue.body || 'No description provided.') + '\n\n' +
                      '## Changes Made\n' +
                      '- [ ] List your changes here\n\n' +
                      '## Testing\n' +
                      '- [ ] Add testing details here\n\n' +
                      '## Checklist\n' +
                      '- [ ] Code follows project style guidelines\n' +
                      '- [ ] Self-review completed\n' +
                      '- [ ] Tests added/updated as needed\n' +
                      '- [ ] Documentation updated as needed',
                draft: false
              });
              
              console.log('Created PR #' + newPR.data.number + ' for issue #' + issueNumber);
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: 'Pull Request Created\n\n' +
                      'A pull request has been automatically created for this issue:\n' +
                      '- PR: #' + newPR.data.number + '\n' +
                      '- Branch: `' + branchName + '`\n\n' +
                      '[View Pull Request](' + newPR.data.html_url + ')\n\n' +
                      'Please review and update the PR description with your implementation details.'
              });
              
              if (issue.labels && issue.labels.length > 0) {
                const labelNames = issue.labels.map(label => label.name);
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: newPR.data.number,
                  labels: labelNames
                });
              }
              
            } catch (error) {
              console.log('Error processing branch ' + branchName + ':', error.message);
              
              if (error.status === 404) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber,
                  body: 'Branch Not Found\n\n' +
                        'Could not find branch `' + branchName + '` for this issue.\n\n' +
                        'Please ensure the branch exists before creating a pull request, or remove the ready-for-pr label and re-assign the issue to create a new branch.'
                });
              } else {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber,
                  body: 'Error Creating Pull Request\n\n' +
                        'An error occurred while creating the pull request: ' + error.message + '\n\n' +
                        'Please create the pull request manually or contact a maintainer.'
                });
              }
            }

  detect-external-pr:
    name: Detect External PR and Auto-Link
    if: github.event_name == 'pull_request' && github.event.action == 'opened' && github.event.pull_request.head.repo.fork == true
    runs-on: ubuntu-latest
    
    steps:
      - name: Auto-link external PR to issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            const prTitle = pr.title;
            const prBody = pr.body || '';
            const branchName = pr.head.ref;
            const username = pr.user.login;
            
            const branchMatch = branchName.match(/^issue-(\d+)-/);
            const titleMatch = prTitle.match(/(?:Fix|Fixes|Close|Closes|Resolve|Resolves)\s+#(\d+)/i);
            const bodyMatch = prBody.match(/(?:Fix|Fixes|Close|Closes|Resolve|Resolves)\s+#(\d+)/i);
            
            const issueNumber = branchMatch?.[1] || titleMatch?.[1] || bodyMatch?.[1];
            
            if (issueNumber) {
              console.log('Found linked issue #' + issueNumber + ' for external PR #' + pr.number);
              
              try {
                const issue = await github.rest.issues.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: parseInt(issueNumber)
                });
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: parseInt(issueNumber),
                  body: 'Pull Request from Fork Detected!\n\n' +
                        '@' + username + ' has opened a pull request to resolve this issue!\n\n' +
                        'PR Details:\n' +
                        '- Pull Request: [#' + pr.number + ' - ' + pr.title + '](' + pr.html_url + ')\n' +
                        '- Branch: `' + username + ':' + branchName + '`\n' +
                        '- Author: @' + username + '\n' +
                        '- Changes: +' + (pr.additions || 0) + ' / -' + (pr.deletions || 0) + ' lines\n\n' +
                        'What happens next?\n' +
                        '1. Review Process: Maintainers will review the code\n' +
                        '2. Testing: Automated tests will run\n' +
                        '3. Feedback: Any feedback will be provided in the PR\n' +
                        '4. Merge: Once approved, the PR will be merged!\n\n' +
                        'Thank you @' + username + ' for contributing to our project!'
                });
                
                try {
                  await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: parseInt(issueNumber),
                    labels: ['in-progress', 'external-contribution']
                  });
                } catch (labelError) {
                  console.log('Could not add labels:', labelError.message);
                }
                
                const allPRs = await github.rest.pulls.list({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  creator: username,
                  state: 'all'
                });
                
                const isFirstContribution = allPRs.data.length <= 1;
                
                if (isFirstContribution) {
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: pr.number,
                    body: 'Welcome to the community, @' + username + '!\n\n' +
                          'This appears to be your first contribution to this repository - that\'s awesome!\n\n' +
                          'What to expect:\n' +
                          '- Automated checks will run to ensure code quality\n' +
                          '- Code review from our maintainers (usually within 24-48 hours)\n' +
                          '- Feedback to help improve the contribution if needed\n' +
                          '- Merge once everything looks good!\n\n' +
                          'Pro Tips for Success:\n' +
                          '- Keep an eye on this PR for any feedback\n' +
                          '- Address any requested changes promptly\n' +
                          '- Ask questions if anything is unclear\n' +
                          '- Make sure all tests are passing\n\n' +
                          'Thank you for choosing to contribute here!\n\n' +
                          '---\n' +
                          'Linked to issue #' + issueNumber
                  });
                } else {
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: pr.number,
                    body: 'Great to see you again, @' + username + '!\n\n' +
                          'Thanks for another valuable contribution to the project!\n\n' +
                          'PR Summary:\n' +
                          '- Addresses: Issue #' + issueNumber + '\n' +
                          '- Changes: +' + (pr.additions || 0) + ' / -' + (pr.deletions || 0) + ' lines\n' +
                          '- Branch: `' + branchName + '`\n\n' +
                          'We\'ll review this as soon as possible.\n\n' +
                          '---\n' +
                          'Auto-linked to issue #' + issueNumber
                  });
                }
                
              } catch (error) {
                console.log('Could not process issue #' + issueNumber + ':', error.message);
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  body: 'Thank you for your contribution, @' + username + '!\n\n' +
                        'We\'ve detected this PR is from a fork - welcome to the community!\n\n' +
                        'While we couldn\'t automatically link this to a specific issue, our maintainers will review your contribution and provide feedback soon.'
                });
              }
            } else {
              console.log('No linked issue found for external PR #' + pr.number);
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: 'Welcome, @' + username + '!\n\n' +
                      'Thank you for contributing to our project!\n\n' +
                      'For better tracking, consider:\n' +
                      '- Referencing an issue in your PR title (e.g., "Fix #123: Description")\n' +
                      '- Adding "Fixes #issue-number" to your PR description\n' +
                      '- Opening an issue first to discuss major changes\n\n' +
                      'We\'ll review your contribution and provide feedback soon!'
              });
            }

  celebrate-merge-external:
    name: Celebrate External Contribution Merge
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && github.event.pull_request.head.repo.fork == true
    runs-on: ubuntu-latest
    
    steps:
      - name: Celebrate successful external contribution
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            const username = pr.user.login;
            const branchName = pr.head.ref;
            
            const branchMatch = branchName.match(/^issue-(\d+)-/);
            const titleMatch = pr.title.match(/(?:Fix|Fixes|Close|Closes|Resolve|Resolves)\s+#(\d+)/i);
            const bodyMatch = pr.body?.match(/(?:Fix|Fixes|Close|Closes|Resolve|Resolves)\s+#(\d+)/i);
            
            const issueNumber = branchMatch?.[1] || titleMatch?.[1] || bodyMatch?.[1];
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body: 'MERGED!\n\n' +
                    'Congratulations @' + username + '! Your pull request has been successfully merged!\n\n' +
                    'Impact Summary:\n' +
                    '- Lines Added: ' + (pr.additions || 0) + '\n' +
                    '- Lines Removed: ' + (pr.deletions || 0) + '\n' +
                    '- Files Changed: ' + (pr.changed_files || 0) + '\n' +
                    '- Commits: ' + (pr.commits || 1) + '\n\n' +
                    'Your code is now part of our project forever!\n\n' +
                    'Next Steps:\n' +
                    '- Star the repository if you enjoyed contributing!\n' +
                    '- Watch for updates to stay in the loop\n' +
                    '- Find more issues to work on\n' +
                    '- Share your success with the community!\n\n' +
                    'Thank you for making open source better!\n\n' +
                    '---\n' +
                    'Merge commit: ' + (pr.merge_commit_sha?.substring(0, 7) || 'unknown')
            });
            
            if (issueNumber) {
              try {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: parseInt(issueNumber),
                  body: 'Issue Resolved by Community Contribution!\n\n' +
                        'This issue has been successfully resolved by @' + username + '\'s contribution!\n\n' +
                        'Merged PR: [#' + pr.number + ' - ' + pr.title + '](' + pr.html_url + ')\n' +
                        'Contributor: @' + username + '\n' +
                        'Merge Commit: ' + (pr.merge_commit_sha?.substring(0, 7) || 'unknown') + '\n\n' +
                        'This is what open source collaboration looks like!'
                });
                
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: parseInt(issueNumber),
                  state: 'closed'
                });
                
                try {
                  await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: parseInt(issueNumber),
                    labels: ['completed', 'community-contribution']
                  });
                } catch (labelError) {
                  console.log('Could not add completion labels:', labelError.message);
                }
                
              } catch (error) {
                console.log('Could not celebrate on issue #' + issueNumber + ':', error.message);
              }
            }
            
            const mergedPRs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              creator: username,
              state: 'closed'
            });
            
            const userMergedPRs = mergedPRs.data.filter(pr => pr.merged_at);
            
            if (userMergedPRs.length === 1) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: 'FIRST CONTRIBUTION MILESTONE!\n\n' +
                      '@' + username + ', this is your FIRST MERGED CONTRIBUTION to this repository!\n\n' +
                      'Welcome to the contributor hall of fame!\n\n' +
                      'Your journey as an open source contributor has officially begun!'
              });
            }

  link-pr-to-issue:
    name: Link PR to Issue
    if: github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'synchronize') && github.event.pull_request.head.repo.fork == false
    runs-on: ubuntu-latest
    
    steps:
      - name: Extract and link issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            const prTitle = pr.title;
            const prBody = pr.body || '';
            const branchName = pr.head.ref;
            
            const branchMatch = branchName.match(/^issue-(\d+)-/);
            const titleMatch = prTitle.match(/(?:Fix|Fixes|Close|Closes|Resolve|Resolves)\s+#(\d+)/i);
            const bodyMatch = prBody.match(/(?:Fix|Fixes|Close|Closes|Resolve|Resolves)\s+#(\d+)/i);
            
            const issueNumber = branchMatch?.[1] || titleMatch?.[1] || bodyMatch?.[1];
            
            if (issueNumber) {
              console.log('Found linked issue #' + issueNumber + ' for PR #' + pr.number);
              
              try {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: parseInt(issueNumber),
                  body: 'Pull Request Linked\n\n' +
                        'Pull request #' + pr.number + ' has been ' + (github.event.action === 'opened' ? 'opened' : 'updated') + ' for this issue.\n\n' +
                        '- PR: [' + pr.title + '](' + pr.html_url + ')\n' +
                        '- Branch: `' + branchName + '`\n' +
                        '- Author: @' + pr.user.login + '\n\n' +
                        (github.event.action === 'opened' ? 'Review the changes and provide feedback!' : 'Changes have been updated in the PR.')
                });
                
                if (github.event.action === 'opened') {
                  await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: parseInt(issueNumber),
                    labels: ['in-progress']
                  });
                }
                
              } catch (error) {
                console.log('Could not comment on issue #' + issueNumber + ':', error.message);
              }
            } else {
              console.log('No linked issue found for PR #' + pr.number);
            }

  handle-pr-merge:
    name: Handle PR Merge
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && github.event.pull_request.head.repo.fork == false
    runs-on: ubuntu-latest
    
    steps:
      - name: Process merged PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            const branchName = pr.head.ref;
            
            const branchMatch = branchName.match(/^issue-(\d+)-/);
            
            if (branchMatch) {
              const issueNumber = parseInt(branchMatch[1]);
              
              try {
                const issue = await github.rest.issues.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber
                });
                
                if (issue.data.state === 'open') {
                  await github.rest.issues.update({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issueNumber,
                    state: 'closed'
                  });
                  
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issueNumber,
                    body: 'Issue Completed\n\n' +
                          'This issue has been resolved and closed automatically because PR #' + pr.number + ' was merged.\n\n' +
                          '- Merged PR: [' + pr.title + '](' + pr.html_url + ')\n' +
                          '- Merged by: @' + (pr.merged_by?.login || 'unknown') + '\n' +
                          '- Merge commit: ' + (pr.merge_commit_sha?.substring(0, 7) || 'unknown') + '\n\n' +
                          'Thank you for your contribution!'
                  });
                  
                  try {
                    await github.rest.issues.removeLabel({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: issueNumber,
                      name: 'in-progress'
                    });
                  } catch (e) {
                    console.log('Label might not exist');
                  }
                  
                  await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issueNumber,
                    labels: ['completed']
                  });
                }
                
              } catch (error) {
                console.log('Error processing issue #' + issueNumber + ':', error.message);
              }
            }

  cleanup-branch:
    name: Cleanup Branch
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.head.repo.fork == false
    runs-on: ubuntu-latest
    
    steps:
      - name: Delete merged branch
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            const branchName = pr.head.ref;
            
            if (branchName.startsWith('issue-') && pr.merged) {
              try {
                await github.rest.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: 'heads/' + branchName
                });
                
                console.log('Deleted branch: ' + branchName);
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  body: 'Branch Cleanup\n\n' +
                        'Branch `' + branchName + '` has been automatically deleted after merge.'
                });
                
              } catch (error) {
                console.log('Could not delete branch ' + branchName + ':', error.message);
              }
            }
