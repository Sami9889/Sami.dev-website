name: Issue Branch & PR Workflow

on:
  issues:
    types: [opened]
  pull_request:
    types: [closed]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  handle-issue-pr:
    runs-on: ubuntu-latest
    steps:
      # Checkout repository with full history
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Configure git
      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      # Set branch info and check collaborator permission
      - name: Set variables
        id: vars
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue;
            const username = issue.user.login.toLowerCase();
            const issueNumber = issue.number;
            const issueTitle = issue.title || 'issue';
            const defaultBranch = context.payload.repository.default_branch;

            const slugify = s => s.toLowerCase()
                                   .replace(/[^a-z0-9]+/g,'-')
                                   .replace(/(^-|-$)/g,'')
                                   .slice(0,50) || 'issue';
            const slug = slugify(issueTitle);
            const branchName = `issue-${issueNumber}/${username}/${slug}`;

            // Check collaborator permission
            let permission = 'none';
            try {
              const perm = await github.rest.repos.getCollaboratorPermissionLevel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                username
              });
              permission = perm.data.permission || 'none';
            } catch(e) {
              console.log('Permission check failed:', e.message);
            }

            console.log(`User: ${username}, Permission: ${permission}`);
            console.log(`Branch name: ${branchName}`);

            // Set outputs properly
            core.setOutput('branchName', branchName);
            core.setOutput('issueNumber', issueNumber);
            core.setOutput('issueTitle', issueTitle);
            core.setOutput('username', username);
            core.setOutput('defaultBranch', defaultBranch);
            core.setOutput('permission', permission);

      # Create branch and initial commit (collaborators)
      - name: Create branch and initial commit
        if: ${{ steps.vars.outputs.permission == 'write' || steps.vars.outputs.permission == 'admin' || steps.vars.outputs.permission == 'maintain' }}
        run: |
          BRANCH="${{ steps.vars.outputs.branchName }}"
          DEFAULT="${{ steps.vars.outputs.defaultBranch }}"
          ISSUE="${{ steps.vars.outputs.issueNumber }}"

          echo "Creating branch: $BRANCH"
          echo "Default branch: $DEFAULT"
          echo "Issue number: $ISSUE"

          # Authenticate git for pushing
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git fetch origin
          git checkout -b "$BRANCH" "origin/$DEFAULT"
          echo "# Work in progress for issue #$ISSUE" > README-ISSUE.md
          git add README-ISSUE.md
          git commit -m "Initial commit for issue #$ISSUE"
          git push origin "$BRANCH"

      # Create draft PR and comment (collaborators)
      - name: Create draft PR and comment
        if: ${{ steps.vars.outputs.permission == 'write' || steps.vars.outputs.permission == 'admin' || steps.vars.outputs.permission == 'maintain' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branchName = '${{ steps.vars.outputs.branchName }}';
            const issueNumber = '${{ steps.vars.outputs.issueNumber }}';
            const issueTitle = '${{ steps.vars.outputs.issueTitle }}';
            const defaultBranch = '${{ steps.vars.outputs.defaultBranch }}';

            console.log(`Creating PR for branch: ${branchName}`);

            const pr = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `[#${issueNumber}] ${issueTitle}`,
              head: branchName,
              base: defaultBranch,
              body: `This PR addresses issue #${issueNumber}\n\nCloses #${issueNumber}`,
              draft: true
            });

            const comment = `âœ… **Branch created successfully!**

**Branch:** \`${branchName}\`
**Draft Pull Request:** ${pr.data.html_url}

**To work on this issue:**
\`\`\`bash
git fetch origin
git checkout ${branchName}
\`\`\`

Make your changes, commit them, and push to continue working on the PR. When ready, mark the PR as "Ready for review".`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parseInt(issueNumber),
              body: comment
            });

      # Comment instructions for external contributors
      - name: External contributor instructions
        if: ${{ steps.vars.outputs.permission != 'write' && steps.vars.outputs.permission != 'admin' && steps.vars.outputs.permission != 'maintain' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branchName = '${{ steps.vars.outputs.branchName }}';
            const issueNumber = '${{ steps.vars.outputs.issueNumber }}';
            const username = '${{ steps.vars.outputs.username }}';

            const comment = `ðŸ‘‹ Hi @${username}, thanks for opening this issue!

Since you don't have write access to this repository, here's how you can contribute:

**1. Fork this repository** (click the "Fork" button at the top)

**2. Clone your fork and create a branch:**
\`\`\`bash
git clone https://github.com/${username}/${context.repo.repo}.git
cd ${context.repo.repo}
git checkout -b ${branchName}
\`\`\`

**3. Make your changes, commit and push:**
\`\`\`bash
git add .
git commit -m "Fix issue #${issueNumber}"
git push origin ${branchName}
\`\`\`

**4. Create a Pull Request** from your fork back to this repository

Make sure to reference this issue in your PR description with "Closes #${issueNumber}"`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parseInt(issueNumber),
              body: comment
            });

      # Cleanup branch on PR close/merge
      - name: PR closed - cleanup branch
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            const branchName = pr.head.ref;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            console.log(`PR ${pr.number} was ${pr.merged ? 'merged' : 'closed'}`);
            console.log(`Branch to cleanup: ${branchName}`);

            const match = branchName.match(/^issue-(\d+)\/.+$/);
            if (!match) {
              console.log('Branch name does not match issue pattern, skipping cleanup');
              return;
            }

            const issueNumber = parseInt(match[1]);
            try {
              await github.rest.git.deleteRef({ 
                owner, 
                repo, 
                ref: `heads/${branchName}` 
              });
              
              const body = `ðŸ§¹ **Branch cleaned up**

The branch \`${branchName}\` has been automatically deleted because PR #${pr.number} was ${pr.merged ? 'merged' : 'closed'}.`;
              
              await github.rest.issues.createComment({ 
                owner, 
                repo, 
                issue_number: issueNumber, 
                body 
              });
              
              // Only add label if issue is still open
              try {
                await github.rest.issues.addLabels({ 
                  owner, 
                  repo, 
                  issue_number: issueNumber, 
                  labels: ['branch-deleted'] 
                });
              } catch(labelErr) {
                console.log('Could not add label (issue might be closed):', labelErr.message);
              }
              
            } catch(err) {
              console.error(`Failed to delete branch: ${err.message}`);
            }
